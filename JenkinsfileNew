@Library('deployment2') _

def artifactoryPromotionMap;
def artifactoryServerConfig;
def archiveArtifactConfig;

def mavenBuild;
def artifactoryServer;
def projectBuildInfo;
def goals;
def pomFileName;
def selectedOption;
def versionNumber;
def emailConfig;
def projectConfig;
def isSNAPSHOT;
def isRELEASE;

pipeline{
	agent any
	tools
	{
		maven 'maven'		
	}
	triggers
	{
		cron('H */4 * * 1-5')
	}
	options
	{
		disableConcurrentBuilds()
	}
	stages
	{
		stage('Setup Configuration parameters to be used by the pipeline')
		{
			steps
			{
				script
				{
					archiveConfig = readFile(file:"src/main/resources/archiveConfig.json")
					artifactoryPublishConfig=readFile(file:"src/main/resources/artifactoryPublishConfig.json")
					emailConfig=readFile(file:"src/main/resources/emailConfig.json")
					//artifactoryPromoteConfig=readFile(file:"src/main/resources/artifactoryPromotionConfig.json")
					
					deploymentConfig=readJSON(file:"src/main/resources/deploymentConfig.json")
					artifactoryPromotionMap=deploymentConfig.artifactoryPromotion
					artifactoryServerConfig=deploymentConfig.artifactoryDeploy
					archiveArtifactConfig=deploymentConfig.archiveArtifact
					emailConfig=deploymentConfig.email
					
					//create artifactor instance
					artfactoryServer=deployment.createArtifactoryInstance()
					//create mavenBuild Instance
					mavenBuild=deployment.createMavenBuildInstance()
					isSNAPSHOT="no"
				}
			}
		}
		stage('Check master branch')
		{
			when
			{
			//env.BRANCH_NAME!="master"
			//Check the branch name and then check the version from the pom.xml if it exists
			//if(env.BRANCH_NAME does not contain release)
			//set a variable in the deploymentConfig.json file for the naming convention
			//open the pom.xml and then check for version 
			//not{
			//	branch 'master'}	
			branch 'testing'			
			}
			steps{
				script{
					isSNAPSHOT="yes"
				}
			}
		}
		stage('Check if release branch')
		{
			when
			{
				expression{isSNAPSHOT=="no"}
			}
			steps
			{
				script
				{
					searchValue=projectConfig.releaseSearchValue
					searchString=env.BRANCH_NAME
					isRELEASE=deployment.isEXIST(searchString,searchValue)
					def filename=projectConfig.configFilename
					versionNumber=deployment.retrieveVersionNumber(filename)
				}
			}
		}
		stage('Publish the build to Artifactory staging repository')
		{
			when{
				expression{isSNAPSHOT=="no" && isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					//Deploy artifacts to the staging 					
					pomFileName="pom.xml"
					goals="clean install"
					//versionNumber="1.1.2"
					
					//Change the maven descriptor from snapshot to release to create release artifacts, version number is increased by a version
					def mavenDescriptor = Artifactory.mavenDescriptor()
					mavenDescriptor.version = versionNumber
					mavenDescriptor.pomFile=pomFileName
					mavenDescriptor.transform()
					
					mavenBuild=deployment2.artifactoryDeployResolveConfig(artfactoryServer,artifactoryServerConfig,mavenBuild)
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
					
				}
			}
		}
		stage('Update POM xml files with the new version number')
		{
			when{
				expression{isSNAPSHOT=="no" && isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					versionNumber=deployment2.updatePOMVersionNumber(versionNumber)
					goals = "versions:set -DnewVersion='${versionNumber}' -DprocessDependencies=true versions:commit".toString()
					pomFileName='pom.xml'
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}
	/**	stage('Push updated pom.xml file(s) to GIT repository')
		{
			when{
				expression{isSNAPSHOT=="no" && isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					def commitMsg="Promoted the build from the staging repository to the release repository"				
					sh 'git add pom.xml'
					sh 'git commit -m "Promoted the build from the staging repository to the release repository"'
					sh 'git config --global push.default simple'
					sh 'git push https:// : HEAD:refs/heads/testing'
				}
			}
		}**/
		stage('Promote build from staging to release repository in Arifactory, Interactive')
		{
			when{
				expression{isSNAPSHOT=="no" && isRELEASE=="yes"}
			}
			steps
			{
				script
				{	
					//Promote artifacts from the staging repository to the release repository
					def displayName="Promote"
					artifactoryPromote=deployment2.artifactoryPromote(artifactoryPromotionMap,projectBuildInfo)
					deployment2.artifactoryPromoteInteractive(artfactoryServer,artifactoryPromote,displayName)				
				}
			}
		}	
		stage('Do not promote to release but publish to artifactory snapshot')
		{
			when{
				expression{isSNAPSHOT=="yes"}
			}
			steps
			{
				script
				{
					pomFileName="pom.xml"
					goals="clean install"
					mavenBuild=deployment2.artifactoryDeployResolveConfig(artfactoryServer,artifactoryServerConfig,mavenBuild)
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}	
	}
	post{
		aborted
		{
			//echo "Process was aborted"
			script{
				echo "Process was aborted"
				//deployment2.sendEmail(emailConfig)
			}
			
		}
		success{
			//echo "Process is successful"
			script{
				echo "Process is successful"
				//deployment2.sendEmail(emailConfig)
				//deployment2.archiveArtifact(archiveConfig)
			}
		}
		unstable{
			//echo "Process is unstable"
			script{
				echo "Process is unstable"
				//deployment2.sendEmail(emailConfig)
			}
		}
		failure{
			//echo "Process failed"
			script{
				echo "Process failed11"
				//Send failure email using template
				//deployment2.sendEmail(emailConfig)
			}
		}
		
	}

}
	