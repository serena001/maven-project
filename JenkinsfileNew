@Library('deployment2') _

def artifactoryPromotionMap;
def artifactoryServerConfig;
def archiveArtifactConfig;

def mavenBuild;
def artifactoryServer;
def projectBuildInfo;
def goals;
def pomFileName;
def selectedOption;
def versionNumber;
def emailConfig;
def projectConfig;
def isSNAPSHOT;
def isMASTER;
def isRELEASE;
def mavenDescriptor;
def deployment;

pipeline{
	agent any
	tools
	{
		maven 'maven'		
	}
	triggers
	{
		cron('H */4 * * 1-5')
	}
	options
	{
		disableConcurrentBuilds()
	}
	stages
	{
		stage('Setup Configuration parameters to be used by the pipeline')
		{
			steps
			{
				script
				{
					deploymentConfig=readJSON(file:"src/main/resources/deploymentConfig.json")
					deployment=load("vars/deployment.groovy")
					artifactoryPromotionMap=deploymentConfig.artifactoryPromotion
					artifactoryServerConfig=deploymentConfig.artifactoryDeploy
					archiveArtifactConfig=deploymentConfig.archiveArtifact
					emailConfig=deploymentConfig.email
					projectConfig=deploymentConfig.project
					
					//create artifactory instance
					artfactoryServer=deployment.createArtifactoryInstance()
					//create mavenBuild Instance
					mavenBuild=deployment.createMavenBuildInstance()
					isMASTER="no"
				}
			}
		}
		stage('Check master branch')
		{
			when
			{
				branch 'master'			
			}
			steps{
				script{
					isMASTER="yes"
				}
			}
		}
		stage('Check if release branch')
		{
			when
			{
				branch '*release*'
			}
			steps
			{
				script
				{
				/**	mavenDescriptor = Artifactory.mavenDescriptor()
					echo "${mavenDescriptor}"
					if(!mavenDescriptor)
					{
						def filename=projectConfig.configFilename
						versionNumber=deployment.retrieveVersionNumber(filename)
						isRELEASE="yes"
					}
					else
					{
						error("Release dependency was detected")
					}**/
					def filename=projectConfig.configFilename
					versionNumber=deployment.retrieveVersionNumber(filename)
					try
            			{		                
		                def descriptor =Artifactory.mavenDescriptor()
		                descriptor.version=versionNumber
		                descriptor.failOnSnapshot=true
		                descriptor.transform()
		                isRELEASE="yes"
            			}
            			catch(err)
            			{
                			error("snapshot dependency found")
            			}
				}
			}
		}
		stage('Publish the build to Artifactory staging repository')
		{
			when{
				expression{isRELEASE=='yes'}
			}
			steps
			{
				script
				{
					//Deploy artifacts to the staging 					
					pomFileName="pom.xml"
					goals="clean install"
					
					//Change the maven descriptor from snapshot to release to create release artifacts, version number is increased by a version
					def mavenDescriptor = Artifactory.mavenDescriptor()
					mavenDescriptor.version = versionNumber
					//Fail the build if it contains a snapshot dependency
					mavenDescriptor.failOnSnapshot=true
					mavenDescriptor.pomFile=pomFileName
					
					mavenBuild=deployment2.artifactoryDeployResolveConfig(artfactoryServer,artifactoryServerConfig,mavenBuild)
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo						
				}
			}
		}
/**		stage('Update POM xml files with the new version number')
		{
			when{
				expression{isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					versionNumber=deployment2.updatePOMVersionNumber(versionNumber)
					goals = "versions:set -DnewVersion='${versionNumber}' -DprocessDependencies=true versions:commit".toString()
					pomFileName='pom.xml'
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}**/
	stage('Push updated pom.xml file(s) to GIT repository')
		{
			when{
				expression{isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					withCredentials([usernamePassword(credentialsId:'userC',usernameVariable:'USERNAME',passwordVariable:'PASSWORD')])
					{
						def username=env.USERNAME
						def password=env.PASSWORD
						def branchName=env.BRANCH_NAME
						def commitMsg="Promoted the build from the staging repository to the release repository"				
						sh 'git add pom.xml'
						sh 'git commit -m "Promoted the build from the staging repository to the release repository"'
						sh 'git config --global push.default simple'
						//sh 'git push https://${username}:${password}@github.com/${username}/maven-project.git : HEAD:refs/head/${branchName}'
						//sh 'git push https://${username}:${password}@github.com/${username}/maven-project.git : HEAD:refs/tags/v${versionNumber}'
						sh 'git push --tags https://${username}:${password}@github.com/${username}/maven-project.git : HEAD:refs/tags/v${versionNumber}
						//sh 'git push https:// : HEAD:refs/heads/testing'
					}
				}
			}
		}
		stage('Promote build from staging to release repository in Arifactory, using Interactive method')
		{
			when{
				expression{isRELEASE=="yes"}
			}
			steps
			{
				script
				{	
					//Promote artifacts from the staging repository to the release repository
					def displayName="Promote"
					mavenDescriptor.failOnSnapshot=true
					mavenDescriptor.pomFile=pomFileName
					artifactoryPromote=deployment2.artifactoryPromote(artifactoryPromotionMap,projectBuildInfo)
					deployment2.artifactoryPromoteInteractive(artfactoryServer,artifactoryPromote,displayName)	
					def isSnaphshot = mavenDescriptor.hasSnapshots()
					echo "${isSnapshot}"			
				}
			}
		}	
		stage('Do not promote to release but publish to artifactory snapshot')
		{
			when{
				expression{isMASTER=="yes"}
			}
			steps
			{
				script
				{
					pomFileName="pom.xml"
					goals="clean install"
					mavenBuild=deployment2.artifactoryDeployResolveConfig(artfactoryServer,artifactoryServerConfig,mavenBuild)
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}	
	}
	post{
		aborted
		{
			//echo "Process was aborted"
			script{
				echo "Process was aborted"
				//deployment2.sendEmail(emailConfig)
			}
			
		}
		success{
			//echo "Process is successful"
			script{
				echo "Process is successful"
				//deployment2.sendEmail(emailConfig)
				//deployment2.archiveArtifact(archiveConfig)
			}
		}
		unstable{
			//echo "Process is unstable"
			script{
				echo "Process is unstable"
				//deployment2.sendEmail(emailConfig)
			}
		}
		failure{
			//echo "Process failed"
			script{
				echo "Process failed11"
				//Send failure email using template
				//deployment2.sendEmail(emailConfig)
			}
		}
		
	}

}
	