@Library('deployment2') _
def archiveConfig;
def artifactoryPublishConfig;
def emailConfig;
def mavenBuild;
def artifactoryServer;
def projectBuildInfo;
def promoteQuestion;
def goals;
def pomFileName;
def selectedOption;
def 	versionNumber;
def selectedOptionVersionNumber;
def artifactoryDeployResolveConfig;
def deploymentConfig;

pipeline{
	agent any
	tools
	{
		maven 'maven'		
	}
	triggers
	{
		cron('H */4 * * 1-5')
	}
	options
	{
		disableConcurrentBuilds()
	}
	stages
	{
		stage('Setup Configuration parameters to be used by the pipeline')
		{
			steps
			{
				script
				{
					archiveConfig = readFile(file:"src/main/resources/archiveConfig.json")
					artifactoryPublishConfig=readFile(file:"src/main/resources/artifactoryPublishConfig.json")
					emailConfig=readFile(file:"src/main/resources/emailConfig.json")
					artifactoryPromoteConfig=readFile(file:"src/main/resources/artifactoryPromotionConfig.json")
					
					deploymentConfig=readJSON(file:"src/main/resources/deploymentConfig.json")
					artifactionDeployResolveConfig=deploymentConfig.artifactoryDeploy
					
					artfactoryServer=deployment.createArtifactoryInstance()						
					mavenBuild=deployment.createMavenBuildInstance()
					artifactoryPromote=deployment.artifactoryPromote(artifactoryPromoteConfig)
				 	versionNumber="1.1.1-SNAPSHOT"
				}
			}
		}
		stage('input for releasing build')
		{
			steps{
				script{
					 selectedOption = input message: 'Do you want to promote this?', ok: 'OK',
								parameters:[choice(name:'CHOICE',choices:['yes','no'],description:'')]
		/**			if(selectedOption=="yes")
					{
						 selectedOptionVersionNumber = input message: 'Please enter a release version number?', ok: 'OK',
								string(name:'versionNumber', defaultValue:'', description:'')
					}**/
				}
			}
		}
		stage('Publish the build to staging')
		{
			when{
				expression{selectedOption=='yes'}
			}
			steps
			{
				script
				{
					//Deploy artifacts to the staging 					
					pomFileName="pom.xml"
					goals="clean install"
					
					//Change the maven descriptor from snapshot to release to create release artifacts, version number is increased by a version
					def mavenDescriptor = Artifactory.mavenDescriptor()
					mavenDescriptor.version = versionNumber
					mavenDescriptor.pomFile=pomFileName
					mavenDescriptor.transform()
					
					mavenBuild=deployment.artifactoryDeployResolveConfig(artifactionDeployResolveConfig,artfactoryServer,mavenBuild)
					projectBuildInfo=deployment.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
					
				}
			}
		}
		stage('Update POM xml files ')
		{
			when{
				expression{selectedOption=='yes'}
			}
			steps
			{
				script
				{
					//Update the pom.xml file(s) with a new version number
					//def versionNumberNew=deployment.updatePOMVersionNumber(versionNumber)
					//echo versionNumberNew
					
					goals = "versions:set -DnewVersion='${versionNumber}' -DprocessDependencies=true versions:commit".toString()
					pomFileName='pom.xml'
					projectBuildInfo=deployment.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}
		stage('Update GIT repository with ')
		{
			when{
				expression{selectedOption=='yes'}
			}
			steps
			{
				script
				{
					def commitMsg="Promoted the build from the staging repository to the release repository"				
					sh 'git add pom.xml'
					sh 'git commit -m "Promoted the build from the staging repository to the release repository"'
					sh 'git config --global push.default simple'
				}
			}
		}
		stage('Promote build from staging to release repository in Arifactory, Interactive')
		{
			when{
				expression{selectedOption=='yes'}
			}
			steps
			{
				script
				{	
					//Promote artifacts from the staging repository to the release repository
					def displayName="Promote"
					deployment.artifactoryPromoteInteractive(artfactoryServer,artifactoryPromote,displayName)
				
				}
			}
		}	
		stage('Do not promote to release but publish to artifactory snapshot')
		{
			when{
				expression{selectedOption=='no'}
			}
			steps
			{
				script
				{
					pomFileName="pom.xml"
					goals="clean install"
					mavenBuild=deployment.artifactoryDeployResolveConfig(artifactionDeployResolveConfig,artfactoryServer,mavenBuild)
					projectBuildInfo=deployment.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}	
	}
	post{
		aborted
		{
			//echo "Process was aborted"
			script{
				echo "Process was aborted"
				//deployment.sendEmail(emailConfig)
			}
			
		}
		success{
			//echo "Process is successful"
			script{
				echo "Process is successful"
				//deployment.sendEmail(emailConfig)
				//deployment.archiveArtifact(archiveConfig)
			}
		}
		unstable{
			//echo "Process is unstable"
			script{
				echo "Process is unstable"
				//deployment.sendEmail(emailConfig)
			}
		}
		failure{
			//echo "Process failed"
			script{
				echo "Process failed"
				//Send failure email using template
				//deployment.sendEmail(emailConfig)
			}
		}
		
	}

}
	