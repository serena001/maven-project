pipeline{
	agent any
	tools
	{
		maven 'maven'		
	}
	triggers
	{
		cron('H */4 * * 1-5')
	}
	options
	{
		disableConcurrentBuilds()
	}
	stages
	{
		stage('Setup Configuration parameters to be used by the pipeline')
		{
			steps
			{
				rtServer(
				id="artifactory",
				url:"http://localhost:8081/artifactory",
				username:"admin",
				password:"admin"
				)
				
			}
		}
		stage('Check master branch')
		{
			when
			{
				branch 'master'			
			}
			steps{
				script{
					isMASTER="yes"
				}
			}
		}
		stage('Check if release branch')
		{
			when
			{
				branch '*release*'
			}
			steps
			{
				script
				{
					def filename=projectConfig.configFilename
					versionNumber=deployment2.retrieveVersionNumber(filename)
					try
            			{		                
		                 mavenDescriptor =Artifactory.mavenDescriptor()
		                mavenDescriptor.version=versionNumber
		                mavenDescriptor.failOnSnapshot=true
		                mavenDescriptor.transform()
		                isRELEASE="yes"
            			}
            			catch(err)
            			{
                			error("snapshot dependency found")
            			}
				}
			}
		}
		stage('Publish the build to Artifactory staging repository')
		{
			when{
				expression{isRELEASE=='yes'}
			}
			steps
			{
				rtMavenResolver(
				id:"resolverId",
				serverId:"artifactory",
				releaseRepo:"libs-release",
				snapshotRepo:"libs-snapshot"
				)						

				rtMavenDeployer(
				id:"deployerId",
				serverId:"artifactory",
				releaseRepo:"libs-staging-local",
				snapshotRepo:"libs-snapshot-local"	
				)
				
				rtMaven(
				tool:maven,
				pom:"pom.xml",
				goals:"clean install",
				resolverId:"resolverId",
				deployerId:"deployerId",
				)
				
				rtPublishBuildInfo(
					serverId:"artifactory"
				)
			}
		}
/**		stage('Update POM xml files with the new version number')
		{
			when{
				expression{isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					versionNumber=deployment2.updatePOMVersionNumber(versionNumber)
					goals = "versions:set -DnewVersion='${versionNumber}' -DprocessDependencies=true versions:commit".toString()
					pomFileName='pom.xml'
					projectBuildInfo=deployment2.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
				}
			}
		}**/
	/**stage('Push updated pom.xml file(s) to GIT repository')
		{
			when{
				expression{isRELEASE=="yes"}
			}
			steps
			{
				script
				{
					withCredentials([usernamePassword(credentialsId:'userC',usernameVariable:'USERNAME',passwordVariable:'PASSWORD')])
					{
						def username=env.USERNAME
						def password=env.PASSWORD
						def branchName=env.BRANCH_NAME
						def commitMsg="Promoted the build from the staging repository to the release repository"				
						bat 'git add pom.xml'
						bat 'git commit -m "Promoted the build from the staging repository to the release repository"'
						bat 'git config --global push.default simple'
						//sh 'git push https://${username}:${password}@github.com/${username}/maven-project.git : HEAD:refs/head/${branchName}'
						//sh 'git push https://${username}:${password}@github.com/${username}/maven-project.git : HEAD:refs/tags/v${versionNumber}'
						//sh 'git push --tags https://${username}:${password}@github.com/${username}/maven-project.git : HEAD:refs/tags/v${versionNumber}'
						//sh 'git push https:// : HEAD:refs/heads/testing'
						bat 'git tag -a v${versionNumber} -m "${versionNumber}"'
						bat 'git push --tags'
					}
				}
			}
		}**/
		stage('Promote build from staging to release repository in Arifactory, using Interactive method')
		{
			when{
				expression{isRELEASE=="yes"}
			}
			steps
			{
				rtAddInteractivePromotion(
				serverId:"artifactory",
				targetRepo:"libs-release-local",
				sourceRepo:"libs-staging-local",
				includeDepedencies:true,
				failFast:true,
				copy:true,
				comment:"This is a promotion to artifactory",
				status:"released"
				)
			}
		}	
		stage('Do not promote to release but publish to artifactory snapshot')
		{
			when{
				expression{isMASTER=="yes"}
			}
			steps
			{
				rtMavenResolver(
				id:"resolverId",
				serverId:"artifactory",
				releaseRepo:"libs-release",
				snapshotRepo:"libs-snapshot"
				)						

				rtMavenDeployer(
				id:"deployerId",
				serverId:"artifactory",
				releaseRepo:"libs-staging-local",
				snapshotRepo:"libs-snapshot-local"	
				)
				
				rtMaven(
				tool:maven,
				pom:"pom.xml",
				goals:"clean install",
				resolverId:"resolverId",
				deployerId:"deployerId",
				)
				
			}
		}	
	}
	post{
		aborted
		{
			//echo "Process was aborted"
			script{
				echo "Process was aborted"
				//deployment2.sendEmail(emailConfig)
			}
			
		}
		success{
			//echo "Process is successful"
			script{
				echo "Process is successful"
				//deployment2.sendEmail(emailConfig)
				//deployment2.archiveArtifact(archiveConfig)
			}
		}
		unstable{
			//echo "Process is unstable"
			script{
				echo "Process is unstable"
				//deployment2.sendEmail(emailConfig)
			}
		}
		failure{
			//echo "Process failed"
			script{
				echo "Process failed11"
				//Send failure email using template
				deployment2.sendEmail(emailConfig)
			}
		}
		
	}

}
	
