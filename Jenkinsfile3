@Library('deployment') _
def archiveConfig;
def artifactoryPublishConfig;
def emailConfig;
def promotionConfig;
def mavenBuild;
def artifactoryServer;
def projectBuildInfo;
def promoteQuestion;
def goals;
def pomFileName;
def choice;

pipeline{
	agent any
	tools
	{
		maven 'maven'		
	}
	triggers
	{
		cron('H */4 * * 1-5')
	}
	options
	{
		disableConcurrentBuilds()
	}
	stages
	{
		stage('Setup Configuration parameters to be used by the pipeline')
		{
			steps
			{
				script
				{
					archiveConfig = readFile(file:"src/main/resources/archiveConfig.json")
					artifactoryPublishConfig=readFile(file:"src/main/resources/artifactoryPublishConfig.json")
					emailConfig=readFile(file:"src/main/resources/emailConfig.json")
					promotionConfig=readFile(file:"src/main/resources/artifactoryPromotionConfig.json")
					
					artifactoryPromoteConfig=deployment.artifactoryPromote(promotionConfig,artfactoryServer)					
					mavenBuild=deployment.createMavenBuildInstance()
					artfactoryServer=deployment.createArtifactoryInstance(artifactoryConfig)					
					//choice="yes"

				}
			}
		}
		stage('input for releasing build')
		{
			steps{
				script{
					def choice = input: message "Do you want to promote this?"
					ok "OK",
					parameters:choice(name:'CHOICE',choices:['yes','no'],description:'')
				}
			}
		}
		stage('promotion')
		{
			when{
				expression{ choice=='yes'}
			}
			steps
			{
				script
				{
					def 	versionNumber="1.1.1-SNAPSHOT"
					
					//Deploy artifacts to the staging 					
					pomFileName="pom.xml"
					goals="clean install"
					
					//Change the maven descriptor from snapshot to release to create release artifacts, version number is increased by a version
					def mavenDescriptor = Artifactory.mavenDescriptor()
					mavenDescriptor.version = ${versionNumber}
					
					mavenBuild=deployment.artifactoryDeployResolveConfig(artifactoryConfig,mavenBuild)
					projectBuildInfo=deployment.buildMaven(mavenBuild,pomFileName,goals)
					artfactoryServer.publishBuildInfo projectBuildInfo	
					
				/**	//Update the pom.xml file(s) with a new version number
					-----------need to increase the number of the verison-------------
					
					goals = "versions:set -DnewVersion='${versionNumber}' -DprocessDependencies=true versions:commit"
					pomFileName='pom.xml'
					deployment.buildMaven(mavenBuild,pomFileName,goals)
					
					def urlGitRepository="https://github.com/serena001/maven-project.git:HEADrefs/heads/testing"	
					def commitMsg="Promoted the build from the staging repository to the release repository"				
					sh 'git add ${pomFileName}'
					sh 'git commit -m "${commitMsg}"'
					sh 'git config --global push.default simple'
					sh 'git push ${urlGitRepository}'
										
					//Promote artifacts from the staging repository to the release repository
					def displayName="Promote"
					//deployment.artifactoryPromoteInteractive(artfactoryServer,artifactoryPromoteConfig,displayName)
				**/
				}
			}
		}
		stage('Do not promote to release but publish to artifactory snapshot')
		{
			when{
				expression{choice=='no'}
			}
			steps
			{
				script
				{
					pomFileName="pom.xml"
					goals="clean install"
					deployment.buildMaven(mavenBuild,pomFileName,goals)
				}
			}
		}		
	}
	post{
		aborted
		{
			echo "Process was aborted"
			script{
				echo "Process was aborted"
				//deployment.sendEmail(emailConfig)
			}
			
		}
		success{
			echo "Process is successful"
			script{
				echo "Process is successful"
				//deployment.sendEmail(emailConfig)
				deployment.archiveArtifact(archiveConfig)
			}
		}
		unstable{
			echo "Process is unstable"
			script{
				echo "Process is unstable"
				//deployment.sendEmail(emailConfig)
			}
		}
		failure{
			echo "Process failed"
			script{
				echo "Process failed"
				//Send failure email using template
				//deployment.sendEmail(emailConfig)
			}
		}
		
	}

}
	